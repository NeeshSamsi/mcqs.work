// Generated by Xata Codegen 0.29.4. Please do not edit.
import { buildClient } from "@xata.io/client";
import type {
  BaseClientOptions,
  SchemaInference,
  XataRecord,
} from "@xata.io/client";

const tables = [
  {
    name: "Sessions",
    columns: [
      { name: "minQuestion", type: "int", notNull: true, defaultValue: "1" },
      { name: "maxQuestion", type: "int", notNull: true, defaultValue: "5" },
      {
        name: "scoringType",
        type: "string",
        notNull: true,
        defaultValue: "Normal",
      },
      {
        name: "optionsType",
        type: "string",
        notNull: true,
        defaultValue: "A-D",
      },
      { name: "complete", type: "bool", notNull: true, defaultValue: "false" },
    ],
  },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type Sessions = InferredTypes["Sessions"];
export type SessionsRecord = Sessions & XataRecord;

export type DatabaseSchema = {
  Sessions: SessionsRecord;
};

const DatabaseClient = buildClient();

const defaultOptions = {
  databaseURL:
    "https://Neesh-s-workspace-tcjig6.eu-central-1.xata.sh/db/mcqs-work",
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super({ ...defaultOptions, ...options }, tables);
  }
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
  if (instance) return instance;

  instance = new XataClient();
  return instance;
};
